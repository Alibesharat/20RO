// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(TaxiContext))]
    [Migration("20190621135948_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Academy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcademyCategoryId");

                    b.Property<int>("AcademyPercent")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("Address");

                    b.Property<bool>("AllowActivity")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("AvatarPath")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("Default.png");

                    b.Property<DateTime?>("BeginDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ContractorId");

                    b.Property<int>("DistrictId");

                    b.Property<string>("Hs_Change");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Latitude")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("35.752308");

                    b.Property<string>("Longtude")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("51.399735");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNubmber");

                    b.Property<string>("SupportNumber");

                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("LHnTW6JtB02TkDZcicPVgw");

                    b.HasKey("Id");

                    b.HasIndex("AcademyCategoryId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Academies");
                });

            modelBuilder.Entity("DAL.AcademyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Hs_Change");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AcademyCategories");
                });

            modelBuilder.Entity("DAL.Accounting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("Hs_Change");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("NextPay");

                    b.Property<DateTime?>("PayDate");

                    b.Property<int>("PayType");

                    b.Property<int>("Payed");

                    b.Property<string>("ServiceRequsetId");

                    b.Property<string>("TrackNumber");

                    b.HasKey("Id");

                    b.HasIndex("ServiceRequsetId");

                    b.ToTable("Accountings");
                });

            modelBuilder.Entity("DAL.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityPercent")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("Hs_Change");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DAL.Contractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowActivity")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("AvatarPath")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("Default.png");

                    b.Property<DateTime?>("BeginDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("Hs_Change");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NIdCode");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNubmber");

                    b.Property<string>("RegisterCompanyNumber");

                    b.Property<DateTime?>("RelaseDate");

                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("Ntdf41vW0U6qYSFmcfqYRg");

                    b.HasKey("Id");

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("DAL.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<int>("DistrictPercent")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("Hs_Change");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("DAL.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowActivity")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("AvatarPath")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("Default.png");

                    b.Property<DateTime?>("BeginDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CarColor");

                    b.Property<string>("CarName");

                    b.Property<string>("CarType");

                    b.Property<int>("ContractorId");

                    b.Property<int>("DriverCode");

                    b.Property<string>("DrivingLicense");

                    b.Property<string>("Hs_Change");

                    b.Property<string>("IranianIdCode");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMaried");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("PelakNumber");

                    b.Property<string>("PhoneNubmber");

                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("X2xu0B2pQUWSJdO0amnoCQ");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("DAL.GeneralSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LogoPath");

                    b.Property<string>("SiteName");

                    b.Property<int>("TaxiPercent");

                    b.Property<int>("VanPercent");

                    b.HasKey("Id");

                    b.ToTable("GeneralSettings");

                    b.HasData(
                        new { Id = 1, LogoPath = "", SiteName = "", TaxiPercent = 2500, VanPercent = 2000 }
                    );
                });

            modelBuilder.Entity("DAL.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Hs_Change");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "برنامه نویس" },
                        new { Id = 2, IsDeleted = false, Name = "مدیر" },
                        new { Id = 3, IsDeleted = false, Name = "کاربر  معمولی" }
                    );
                });

            modelBuilder.Entity("DAL.ServiceRequset", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("JGIGZ0gdWkq6itZEuIVjGQ");

                    b.Property<int>("AcademyId");

                    b.Property<string>("Address");

                    b.Property<int>("Age");

                    b.Property<decimal>("Distance");

                    b.Property<string>("FullName");

                    b.Property<string>("Hs_Change");

                    b.Property<string>("IrIdCod");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Latitue");

                    b.Property<string>("Longtude");

                    b.Property<string>("Note");

                    b.Property<int>("NotifState");

                    b.Property<int>("Price");

                    b.Property<int>("RequsetState");

                    b.Property<int>("ServiceType");

                    b.Property<int>("StudentParrentId");

                    b.Property<string>("TaxiServiceId");

                    b.HasKey("Id");

                    b.HasIndex("AcademyId");

                    b.HasIndex("StudentParrentId");

                    b.HasIndex("TaxiServiceId");

                    b.ToTable("ServiceRequsets");
                });

            modelBuilder.Entity("DAL.StudentParent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AccesptTerms");

                    b.Property<bool>("AllowActivity")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("AvatarPath");

                    b.Property<DateTime?>("BeginDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ClassName");

                    b.Property<string>("Hs_Change");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNubmber");

                    b.Property<string>("Token");

                    b.HasKey("Id");

                    b.ToTable("StudentParents");
                });

            modelBuilder.Entity("DAL.TaxiService", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("rDW1jcmyWUGtUSpAEkXgLg");

                    b.Property<int>("DriverId");

                    b.Property<int>("DriverPercent")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(75);

                    b.Property<string>("Hs_Change");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("ServiceType");

                    b.Property<int>("TaxiCabState");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("TaxiServices");
                });

            modelBuilder.Entity("DAL.Academy", b =>
                {
                    b.HasOne("DAL.AcademyCategory", "Category")
                        .WithMany("Academies")
                        .HasForeignKey("AcademyCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Contractor", "Contractor")
                        .WithMany("Academies")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.District", "District")
                        .WithMany("Academies")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Accounting", b =>
                {
                    b.HasOne("DAL.ServiceRequset", "ServiceRequset")
                        .WithMany("Accountings")
                        .HasForeignKey("ServiceRequsetId");
                });

            modelBuilder.Entity("DAL.District", b =>
                {
                    b.HasOne("DAL.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Driver", b =>
                {
                    b.HasOne("DAL.Contractor", "Contractor")
                        .WithMany("Drivers")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.ServiceRequset", b =>
                {
                    b.HasOne("DAL.Academy", "Academy")
                        .WithMany("ServiceRequsets")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.StudentParent", "StudentParent")
                        .WithMany("ServiceRequsets")
                        .HasForeignKey("StudentParrentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.TaxiService", "TaxiService")
                        .WithMany("Passnegers")
                        .HasForeignKey("TaxiServiceId");
                });

            modelBuilder.Entity("DAL.TaxiService", b =>
                {
                    b.HasOne("DAL.Driver", "Driver")
                        .WithMany("TaxiServices")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
